version: '3.8'

volumes:
  db_volume:
  # es_certs:
  es_data01:
  es_kibana:
  es_ingest_data:
  es_logstash:
  es_filebeat:
  es_metricbeat:

# secrets:
#   nginx_crt:
#     file: ${ssl_dir}/${crt_name}
#   nginx_key:
#     file: ${ssl_dir}/${key_name}

networks:
  transcendence:
    driver: bridge

services:
  # nginx:
  #   image: nginx:1.27.0-bookworm
  #   container_name: nginx
  #   labels:
  #     app: ${APP_LABLE}
  #     environment: ${APP_ENV}
  #     version: ${APP_VERSION}
  #   depends_on:
  #     # - kibana
  #     - filebeat
  #     - metricbeat
  #   ports:
  #     - '443:443'
  #   volumes:
  #     - ./nginx/conf/:/etc/nginx/conf.d/
  #   secrets:
  #     - nginx_crt
  #     - nginx_key
  #   networks:
  #     - transcendence
  #   command: ["nginx", "-g", "daemon off;"]
  #   restart: always

  postgres:
    image: postgres:12.19-bookworm
    container_name: postgres
    labels:
      app: ${APP_LABLE}
      environment: ${APP_ENV}
      version: ${APP_VERSION}
    env_file:
      - .env
    # ports:
    #  - '5432:5432'
    volumes:
      - ./postgres/conf/:/var/lib/postgresql/data/
      - db_volume:/var/lib/postgresql/data
    networks:
      - transcendence
    restart: always

  backend:
    image: python:3.9.19-slim-bookworm
    container_name: backend
    labels:
      app: ${APP_LABLE}
      environment: ${APP_ENV}
      version: ${APP_VERSION}
    depends_on:
      - postgres
    env_file:
      - .env
    ports:
      - '8000:8000'
    volumes:
      - ./backend:/app
    networks:
      - transcendence
    restart: always
    working_dir: /app
    command: >
      /bin/sh -c "
      pip install --upgrade pip && pip install --no-cache-dir -r requirements.txt &&
      python3 manage.py collectstatic --noinput &&
      apt-get update && apt-get install -y curl netcat-openbsd &&
      ./tools/migrate.sh && python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: [
              "CMD-SHELL",
              "curl -f http://localhost:8000/ || exit 1"
            ]
      interval: 10s
      timeout: 10s
      retries: 120

  # setup:
  #   depends_on:
  #     - backend
  #   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
  #   volumes:
  #     - es_certs:/usr/share/elasticsearch/config/certs
  #   user: "0"
  #   command: >
  #     bash -c '
  #       if [ x${ELASTIC_PASSWORD} == x ]; then
  #         echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
  #         exit 1;
  #       elif [ x${KIBANA_PASSWORD} == x ]; then
  #         echo "Set the KIBANA_PASSWORD environment variable in the .env file";
  #         exit 1;
  #       fi;
  #       if [ ! -f config/certs/ca.zip ]; then
  #         echo "Creating CA";
  #         bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
  #         unzip config/certs/ca.zip -d config/certs;
  #       fi;
  #       if [ ! -f config/certs/certs.zip ]; then
  #         echo "Creating certs";
  #         echo -ne \
  #         "instances:\n"\
  #         "  - name: es01\n"\
  #         "    dns:\n"\
  #         "      - es01\n"\
  #         "      - localhost\n"\
  #         "    ip:\n"\
  #         "      - 127.0.0.1\n"\
  #         "  - name: kibana\n"\
  #         "    dns:\n"\
  #         "      - kibana\n"\
  #         "      - localhost\n"\
  #         "    ip:\n"\
  #         "      - 127.0.0.1\n"\
  #         > config/certs/instances.yml;
  #         bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
  #         unzip config/certs/certs.zip -d config/certs;
  #       fi;
  #       echo "Setting file permissions"
  #       chown -R root:root config/certs;
  #       find . -type d -exec chmod 750 \{\} \;;
  #       find . -type f -exec chmod 640 \{\} \;;
  #       echo "Waiting for Elasticsearch availability";
  #       until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
  #       echo "Setting kibana_system password";
  #       until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
  #       echo "All done!";
  #     '
  #   networks:
  #     - transcendence
  #   healthcheck:
  #     test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
  #     interval: 1s
  #     timeout: 5s
  #     retries: 120

  es01:
    depends_on:
      # setup:
      #   condition: service_healthy
      backend:
        condition: service_healthy
    # image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    image: elasticsearch:8.14.3
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      # - es_certs:/usr/share/elasticsearch/config/certs
      - es_data01:/usr/share/elasticsearch/data
    # ports:
    #   - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      # - xpack.security.enabled=true
      # - xpack.security.http.ssl.enabled=true
      # - xpack.security.http.ssl.key=certs/es01/es01.key
      # - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      # - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      # - xpack.security.transport.ssl.enabled=true
      # - xpack.security.transport.ssl.key=certs/es01/es01.key
      # - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      # - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      # - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - "ES_JAVA_OPTS=-Xmx512m -Xms512m"
    mem_limit: ${ES_MEM_LIMIT}
    # ulimits:
    #   memlock:
    #     soft: -1
    #     hard: -1
    ulimits:
      memlock:
        soft: 2028284  # Set to the maximum '-l: locked-in-memory size (kbytes)' allowed by the system 
        hard: 2028284
      nofile:
        soft: 1048576  # Set to the maximum number of '-n: file descriptors' allowed by the system <bash$ ulimit -a>
        hard: 1048576
      nproc:
        soft: 63082  # Set to the maximum number of '-u: processes' allowed by the system <bash$ ulimit -a>
        hard: 63082
    networks:
      - transcendence
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f http://localhost:9200/_cluster/health || exit 1"
          # "curl -f http://localhost:9200 | grep ${STACK_VERSION}",
          # "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120 

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      # - es_certs:/usr/share/kibana/config/certs
      - es_kibana:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      # - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_HOSTS=http://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      # - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      # - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      # - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      # - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      # - SERVER_BASEPATH=/kibana
    mem_limit: ${KB_MEM_LIMIT}
    networks:
      - transcendence
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120


  logstash:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      # - es_certs:/usr/share/logstash/certs
      - es_logstash:/usr/share/logstash/data
      - es_ingest_data:/usr/share/logstash/ingest_data
      - "./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      # - ELASTIC_HOSTS=https://es01:9200
      - ELASTIC_HOSTS=http://es01:9200
    networks:
      - transcendence
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f http://localhost:9600/_node/stats || exit 1"
          # "curl -f http://localhost:9600 | grep '\"http_address\":\"0.0.0.0:9600\"'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120


  filebeat:
    depends_on:
      # es01:
      #   condition: service_healthy
      logstash:
        condition: service_healthy
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    user: root
    volumes:
      # - es_certs:/usr/share/filebeat/certs
      - es_filebeat:/usr/share/filebeat/data
      - es_ingest_data:/usr/share/filebeat/ingest_data
      - "./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      # - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      # - ELASTIC_HOSTS=https://es01:9200
      - ELASTIC_HOSTS=http://es01:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash:9600
    networks:
      - transcendence


  metricbeat:
    depends_on:
      # es01:
      #   condition: service_healthy
      # kibana:
      #   condition: service_healthy
      logstash:
        condition: service_healthy
    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
    user: root
    volumes:
      # - es_certs:/usr/share/metricbeat/certs
      - es_metricbeat:/usr/share/metricbeat/data
      - "./metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/proc:/hostfs/proc:ro"
      - "/:/hostfs:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      # - ELASTIC_HOSTS=https://es01:9200
      - ELASTIC_HOSTS=http://es01:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash:9600
    networks:
      - transcendence
